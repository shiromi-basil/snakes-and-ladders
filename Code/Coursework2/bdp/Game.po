THEORY ProofList IS
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(17) & _f(42) & WellDefinedness_NewGame.2,(_f(48) => _f(50));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(17) & _f(42) & WellDefinedness_NewGame.1,(_f(48) => _f(49));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(17) & _f(18) & WellDefinedness_Move.10,(_f(26) & _f(25) & _f(24) & _f(23) & _f(48) => _f(52));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(17) & _f(18) & WellDefinedness_Move.9,(_f(26) & _f(25) & _f(24) & _f(22) & _f(48) => _f(52));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(17) & _f(18) & WellDefinedness_Move.8,(_f(26) & _f(20) & _f(48) => _f(53));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(17) & _f(18) & WellDefinedness_Move.7,(_f(26) & _f(20) & _f(48) => _f(52));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(17) & _f(18) & WellDefinedness_Move.6,(_f(26) & _f(20) & _f(48) => _f(54));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(17) & _f(18) & WellDefinedness_Move.5,(_f(19) & _f(48) => _f(53));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(17) & _f(18) & WellDefinedness_Move.4,(_f(19) & _f(48) => _f(52));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(17) & _f(18) & WellDefinedness_Move.3,(_f(19) & _f(48) => _f(51));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(17) & _f(18) & WellDefinedness_Move.2,(_f(48) => _f(50));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(17) & _f(18) & WellDefinedness_Move.1,(_f(48) => _f(49));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(17) & _f(42) & NewGame.4,(_f(8) & _f(15) => _f(16));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(17) & _f(42) & NewGame.3,(_f(8) & _f(13) => _f(14));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(17) & _f(42) & NewGame.2,(_f(8) & _f(11) => _f(12));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(17) & _f(42) & NewGame.1,(_f(8) & _f(9) => _f(10));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(17) & _f(18) & Move.18,(_f(26) & _f(25) & _f(24) & _f(23) & _f(8) & _f(15) => _f(40));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(17) & _f(18) & Move.17,(_f(26) & _f(25) & _f(24) & _f(23) & _f(8) & _f(30) => _f(31));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(17) & _f(18) & Move.16,(_f(26) & _f(25) & _f(24) & _f(23) & _f(8) & _f(11) => _f(39));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(17) & _f(18) & Move.15,(_f(26) & _f(25) & _f(24) & _f(23) & _f(8) & _f(9) => _f(38));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(17) & _f(18) & Move.14,(_f(26) & _f(25) & _f(24) & _f(22) & _f(8) & _f(15) => _f(40));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(17) & _f(18) & Move.13,(_f(26) & _f(25) & _f(24) & _f(22) & _f(8) & _f(30) => _f(31));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(17) & _f(18) & Move.12,(_f(26) & _f(25) & _f(24) & _f(22) & _f(8) & _f(11) => _f(39));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(17) & _f(18) & Move.11,(_f(26) & _f(25) & _f(24) & _f(22) & _f(8) & _f(9) => _f(38));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(17) & _f(18) & Move.10,(_f(26) & _f(20) & _f(8) & _f(15) => _f(37));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(17) & _f(18) & Move.9,(_f(26) & _f(20) & _f(8) & _f(30) => _f(31));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(17) & _f(18) & Move.8,(_f(26) & _f(20) & _f(8) & _f(35) => _f(36));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(17) & _f(18) & Move.7,(_f(26) & _f(20) & _f(8) & _f(11) => _f(34));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(17) & _f(18) & Move.6,(_f(26) & _f(20) & _f(8) & _f(9) => _f(33));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(17) & _f(18) & Move.5,(_f(19) & _f(8) & _f(15) => _f(32));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(17) & _f(18) & Move.4,(_f(19) & _f(8) & _f(30) => _f(31));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(17) & _f(18) & Move.3,(_f(19) & _f(8) & _f(13) => _f(29));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(17) & _f(18) & Move.2,(_f(19) & _f(8) & _f(11) => _f(28));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & _f(17) & _f(18) & Move.1,(_f(19) & _f(8) & _f(9) => _f(27));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Initialisation.4,(_f(6) & _f(7) & _f(8) & _f(15) => _f(16));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Initialisation.3,(_f(6) & _f(7) & _f(8) & _f(13) => _f(14));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Initialisation.2,(_f(6) & _f(7) & _f(8) & _f(11) => _f(12));
_f(1) & _f(2) & _f(3) & _f(4) & _f(5) & Initialisation.1,(_f(6) & _f(7) & _f(8) & _f(9) => _f(10))
END
&
THEORY Formulas IS
((NAT) = (((0) .. (2147483647)))) & ((INT) = (((-2147483647) .. (2147483647))));
board : POW( (NAT-{0})) & ((board) = (((1) .. (100)))) & snakes : board +-> board & snakes~ : board +-> board & ((snakes) : (((board) >+> (board)))) & ((snakes) = (({((31) |-> (4))}\/{((16) |-> (13))}\/{((47) |-> (25))}\/{((66) |-> (52))}\/{((63) |-> (60))}\/{((97) |-> (75))}))) & ((card(snakes)) = (6)) & ((((dom(snakes)) /\ (ran(snakes)))) = ({})) & ladders : board +-> board & ladders~ : board +-> board & ((ladders) : (((board) >+> (board)))) & ((ladders) = (({((3) |-> (39))}\/{((10) |-> (12))}\/{((27) |-> (53))}\/{((56) |-> (84))}\/{((61) |-> (99))}\/{((74) |-> (90))}))) & ((card(ladders)) = (6)) & ((((dom(ladders)) /\ (ran(ladders)))) = ({})) & normalSquares : POW( board) & ((((normalSquares) /\ (dom(snakes)))) = ({})) & ((((normalSquares) /\ (ran(snakes)))) = ({})) & ((((normalSquares) /\ (dom(ladders)))) = ({})) & ((((normalSquares) /\ (ran(ladders)))) = ({})) & ((((((((((normalSquares) \/ (dom(snakes)))) \/ (ran(snakes)))) \/ (dom(ladders)))) \/ (ran(ladders)))) = (board)) & ((startSquare) : (board)) & ((startSquare) : (normalSquares)) & ((startSquare) = (1)) & ((finishSquare) : (board)) & ((finishSquare) : (normalSquares)) & ((finishSquare) = (100));
((1..6)*{MOVEMENT_REPORT}): FIN(NATURAL*{MOVEMENT_REPORT}) & not(((1..6)*{MOVEMENT_REPORT}) = {});
dice : POW( (NAT-{0})) & ((dice) = (((1) .. (6))));
((diceValue) : ((NAT-{0}))) & ((diceValue) : (dice));
(((random )(((1) |-> (7)))) : ((NAT-{0})));
(((random )(((1) |-> (7)))) : (dice));
"Invariant is preserved";
"Check invariant ((currentPosition) : ((NAT-{0})))";
((1) : ((NAT-{0})));
"Check invariant ((currentPosition) : (board))";
((1) : (board));
"Check invariant ((noOfSnakesEncountered) : (NAT))";
((0) : (NAT));
"Check invariant ((visitedSquares) : (seq(board)))";
(([startSquare]) : (seq(board)));
((currentPosition) : ((NAT-{0}))) & ((currentPosition) : (board)) & ((noOfSnakesEncountered) : (NAT)) & ((noOfLaddersEncountered) : (NAT)) & ((noOfTurnsTaken) : (NAT)) & visitedSquares : NATURAL-{0} +-> board & ((visitedSquares) : (seq(board)));
((report) : (((1..6)*{MOVEMENT_REPORT}))) & ((position) : ((NAT-{0})));
(((currentPosition + diceValue)) : (dom(snakes)));
(((currentPosition + diceValue)) : (dom(ladders)));
(finishSquare +1 <= (currentPosition + diceValue));
(((currentPosition + diceValue)) = (finishSquare));
not((((currentPosition + diceValue)) = (finishSquare)));
not((finishSquare +1 <= (currentPosition + diceValue)));
not((((currentPosition + diceValue)) : (dom(ladders))));
not((((currentPosition + diceValue)) : (dom(snakes))));
(((snakes )((currentPosition + diceValue))) : ((NAT-{0})));
(((snakes )((currentPosition + diceValue))) : (board));
((succ(noOfSnakesEncountered)) : (NAT));
"Check invariant ((noOfTurnsTaken) : (NAT))";
((succ(noOfTurnsTaken)) : (NAT));
((((((visitedSquares) <- ((currentPosition + diceValue)))) <- ((snakes )((currentPosition + diceValue))))) : (seq(board)));
(((ladders )((currentPosition + diceValue))) : ((NAT-{0})));
(((ladders )((currentPosition + diceValue))) : (board));
"Check invariant ((noOfLaddersEncountered) : (NAT))";
((succ(noOfLaddersEncountered)) : (NAT));
((((((visitedSquares) <- ((currentPosition + diceValue)))) <- ((ladders )((currentPosition + diceValue))))) : (seq(board)));
(((currentPosition + diceValue)) : ((NAT-{0})));
(((currentPosition + diceValue)) : (board));
((((visitedSquares) <- ((currentPosition + diceValue)))) : (seq(board)));
btrue;
((report) : (((1..6)*{MOVEMENT_REPORT})));
((noOfTurnsTaken) : (NAT));
((noOfLaddersEncountered) : (NAT));
((noOfSnakesEncountered) : (NAT));
((currentPosition) : (board));
((currentPosition) : ((NAT-{0})));
"Well definedness";
((((1) |-> (7))) : (dom(random)));
((random) : (((dom(random)) +-> (ran(random)))));
((snakes) : (((dom(snakes)) +-> (ran(snakes)))));
((visitedSquares) : (seq(ran(visitedSquares))));
((((visitedSquares) <- ((currentPosition + diceValue)))) : (seq(ran(((visitedSquares) <- ((currentPosition + diceValue)))))));
((ladders) : (((dom(ladders)) +-> (ran(ladders)))))
END
&
THEORY EnumerateX IS
MOVEMENT_REPORT == {WentDownASnake,WentUpALadder,NoMovementNewPositionGreaterThenHundred,GameWon,LandedOnANormalSquare,StartingNewGame}
END
